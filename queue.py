'''#Queue via listqueue = []   # Adding elements to the queue queue.append('a') queue.append('b') queue.append('c')   print("Initial queue") print(queue)   # Removing elements from the queue print("\nElements dequeued from queue") print(queue.pop(0)) print(queue.pop(0))   print("\nQueue after removing elements") print(queue) #Queue via collections.dequefrom collections import deque   # Initializing a queue q = deque()   # Adding elements to a queue q.append('a') q.append('b') q.append('c')   print("Initial queue") print(q)   # Removing elements from a queue print("\nElements dequeued from the queue") print(q.popleft()) print(q.popleft()) print(q.popleft())   print("\nQueue after removing elements") print(q) ''''''You have a RecentCounter class which counts the number of recent requests within a certain time frame.Implement the RecentCounter class:RecentCounter() Initializes the counter with zero recent requests.int ping(int t) Adds a new request at time t, where t represents some time in milliseconds, and returns the number of requests that has happened in the past 3000 milliseconds (including the new request). Specifically, return the number of requests that have happened in the inclusive range [t - 3000, t].It is guaranteed that every call to ping uses a strictly larger value of t than the previous call. Example 1:Input["RecentCounter", "ping", "ping", "ping", "ping"][[], [1], [100], [3001], [3002]]Output[null, 1, 2, 3, 3]ExplanationRecentCounter recentCounter = new RecentCounter();recentCounter.ping(1);     // requests = [1], range is [-2999,1], return 1recentCounter.ping(100);   // requests = [1, 100], range is [-2900,100], return 2recentCounter.ping(3001);  // requests = [1, 100, 3001], range is [1,3001], return 3recentCounter.ping(3002);  // requests = [1, 100, 3001, 3002], range is [2,3002], return 3'''requests = []t = 1requests.append(t)t = 100requests.append(t)t = 3001requests.append(t)t = 3002requests.append(t)count = 0for i in requests:    if t-3000<=i<=t:        count+=1print (count)